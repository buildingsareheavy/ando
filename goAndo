#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Ando has failed you  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# BLUEPRINTS: Check for required functions file
###############################################################################

if [ -e blueprints ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "blueprints"
else
	printf "\n ⚠️  ./blueprints not found. \n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Go Ando Go!          https://www.ascii-art-generator.org/ ( font: Slant )
###############################################################################

printf "       

    ___       _   __   ____     _____
   /   |     / | / /  / __ \   / __  /
  / /| |    /  |/ /  / / / /  / / / /
 / ___ |   / /|  /  / /_/ /  / /_/ / 
/_/  |_|  /_/ |_/  /_____/   \____/  
                                       
╭───────────────────────────────────────────────────╮
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password…"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key…'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies…"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# Bash-it
# -----------------------------------------------------------------------------
if [ -d "$HOME/.bash_it" ]; then
	print_success_muted "Bash-it already installed. Skipping."
else
	step "Installing Bash-it…"
	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
	~/.bash_it/install.sh --silent --no-modify-config
	print_success "Bash-it installed!"
fi

# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
if [ -x nvm ]; then
	step "Installing NVM…"
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
	print_success "NVM installed!"
	step "Installing latest Node…"
	nvm install node
	nvm use node
	nvm run node --version
	nodev=$(node -v)
	print_success "Using Node $nodev!"
else
	print_success_muted "NVM/Node already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask…"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/materials/brews ]; then
	chapter "Installing Homebrew formulae…"

	for brew in $(<$cwd/materials/brews); do
		install_brews $brew
	done
fi


###############################################################################
# INSTALL: taps
###############################################################################
if [ -e $cwd/materials/taps ]; then
	chapter "Installing Homebrew taps…"

	for brew in $(<$cwd/materials/taps); do
		install_brew_taps $tap
	done
fi




###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/materials/casks ]; then
	chapter "Installing apps via Homebrew…"

	for cask in $(<$cwd/materials/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store…"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

	else

	if [ -e $cwd/materials/apps ]; then
		if mas_setup; then
			# Workaround for associative array in Bash 3
			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
			for app in $(<$cwd/materials/apps); do
				KEY="${app%%::*}"
				VALUE="${app##*::}"
				install_application_via_app_store $KEY $VALUE
			done
		else
			print_warning "Please signin to App Store first. Skipping."
		fi
	fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/materials/npm ]; then
	chapter "Installing npm packages…"

	for pkg in $(<$cwd/materials/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi


###############################################################################
# LINK: dotfiles
###############################################################################
chapter "Linking dotfiles…"
if [ -e $cwd/materials/dotfiles ]; then
	
		if ask "Last Step. Do you want to link the dotfiles?" Y; then
			symlink_dotfiles;
			echo "\n";
			print_success "Dotfiles complete.";
	
	else
		print_success_muted "Linking was declined. Skipped.";
	fi
else
	print_warning "Something went wrong. Skipping."
fi


###############################################################################
# END
###############################################################################
e_all_finished
